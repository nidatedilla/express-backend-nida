// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Thread {
  id        Int      @id @default(autoincrement())
  content   String
  authorId  Int
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isDeleted Int      @default(0)
  likes     Like[]
  replies   Reply[]
  author    User     @relation("ThreadAuthor", fields: [authorId], references: [id])
}

model User {
  id          Int         @id @default(autoincrement())
  email       String      @unique
  username    String?     @unique
  fullname    String
  password    String
  bio         String?
  coverImage  String?
  avatarImage String?
  threads     Thread[]    @relation("ThreadAuthor")
  likes       Like[]
  replyLikes  ReplyLike[]
  followers   Follow[]    @relation("Followers")
  following   Follow[]    @relation("Following")
  replies     Reply[]
  isDeleted   Int         @default(0)
}

model Like {
  id        Int      @id @default(autoincrement())
  thread    Thread   @relation(fields: [threadId], references: [id])
  threadId  Int
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  createdAt DateTime @default(now())

  @@unique([threadId, userId])
}

model Follow {
  id          Int      @id @default(autoincrement())
  follower    User     @relation("Following", fields: [followerId], references: [id])
  followerId  Int
  following   User     @relation("Followers", fields: [followingId], references: [id])
  followingId Int
  createdAt   DateTime @default(now())

  @@unique([followerId, followingId])
}

model Reply {
  id        Int         @id @default(autoincrement())
  content   String
  image     String?
  thread    Thread      @relation(fields: [threadId], references: [id])
  threadId  Int
  user      User        @relation(fields: [userId], references: [id])
  userId    Int
  createdAt DateTime    @default(now())
  isDeleted Int         @default(0)
  likes     ReplyLike[]
}

model ReplyLike {
  id        Int      @id @default(autoincrement())
  reply     Reply    @relation(fields: [replyId], references: [id])
  replyId   Int
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  createdAt DateTime @default(now())

  @@unique([replyId, userId])
}

model PasswordResetToken {
  id          Int      @id @default(autoincrement())
  email       String
  token       String   @unique
  expiryDate  DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
